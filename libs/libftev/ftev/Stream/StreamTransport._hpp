/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   StreamTransport.hpp                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: hshimizu <hshimizu@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/18 19:06:11 by hshimizu          #+#    #+#             */
/*   Updated: 2025/03/18 19:55:55 by hshimizu         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#pragma once

#include <ftev/Stream/StreamProtocol.hpp>
#include <ftev/Transport/ReadTransport.hpp>
#include <ftev/Transport/WriteTransport.hpp>

#include <ftpp/socket/Socket.hpp>

#include <cassert>

namespace ftev {

class StreamTransport : public ReadTransport, public WriteTransport {
private:
  ftev::StreamProtocol *_protocol;
  ftpp::Socket _socket;

  std::size_t _read(char *buffer, std::size_t size) {
    return _socket.read(buffer, size);
  }
  std::size_t _write(char const *buffer, std::size_t size) {
    return _socket.write(buffer, size);
  }

public:
  StreamTransport(EventLoop &loop, ftpp::Socket &socket)
      : BaseTransport(loop), ReadTransport(loop), WriteTransport(loop),
        _protocol(NULL), _socket(socket) {
    _socket.swap(socket);
  }

  ~StreamTransport() {
  }

  int getFd() const {
    return _socket.getSockfd();
  }

  void setProtocol(StreamProtocol &protocol) {
    _protocol = &protocol;
  }

  StreamProtocol &getProtocol() {
    assert(_protocol);
    return *_protocol;
  }
};

} // namespace ftev
